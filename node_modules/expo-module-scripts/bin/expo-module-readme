#!/usr/bin/env node
'use strict';

const path = require('path');
const fs = require('fs');
const glob = require('glob');

function replaceAll(current, replacement, content) {
  let regexp = new RegExp(escapeRegExp('${' + current + '}'), 'g');
  return content.replace(regexp, replacement);
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function removeUnapplicableSections(name, content) {
  let opener = `<!--- remove for ${name} --->`;
  let closer = `<!--- end remove for ${name} --->`;
  let nextContent = content;

  while (nextContent.includes(opener)) {
    let openIndex = nextContent.indexOf(opener);
    let closeIndex = nextContent.indexOf(closer);
    if (!closeIndex) {
      console.warn(`Can't find section closer for ${name}`);
      closeIndex = openIndex + opener.length;
    }
    let section = nextContent.substring(openIndex, closeIndex + closer.length);
    nextContent = nextContent.replace(section, '');
  }
  return nextContent;
}

function removeOptionals(content) {
  let regexp = new RegExp(escapeRegExp('<!---') + '.*' + escapeRegExp('--->') + '\n', 'g');
  return content.replace(regexp, '');
}

const DEFAULT_HOMEPAGE = 'https://docs.expo.io/versions/latest/';

function generateREADME() {
  let template = path.join(__dirname, '..', 'templates', 'README.md');
  let readme = fs.readFileSync(template, 'utf8');
  let pkg = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'package.json'), 'utf8'));
  let packageName = pkg.name;
  let homepage = pkg.homepage || DEFAULT_HOMEPAGE;
  let description = pkg.description || 'Put a description of your Unimodule here';

  // This isn't really accurate, but these all behave the same as far as READMEs go
  let isInterface = packageName.endsWith('-interface') || packageName.endsWith('-provider');

  let isAndroid = fs.existsSync(path.join(process.cwd(), 'android'));
  let isIOS = fs.existsSync(path.join(process.cwd(), 'ios'));

  // Search in docs/versions/unversioned/sdk/*.md - can't find it? Ask what it should be and initialize for them
  readme = replaceAll('packageName', packageName, readme);
  readme = replaceAll('description', description, readme);

  if (isIOS) {
    let podspecs = glob.sync('ios/**/*.podspec');
    let podspecPath = podspecs[0];
    let podName = (() => {
      let parts = podspecPath.split('/');
      return parts[parts.length - 1].replace('.podspec', '');
    })();

    readme = replaceAll('podName', podName, readme);
  } else {
    readme = removeUnapplicableSections('no-ios', readme);
  }

  if (isInterface) {
    readme = removeUnapplicableSections('interfaces', readme);
  } else {
    let docName;
    if (homepage === DEFAULT_HOMEPAGE || homepage.startsWith('https://github.com')) {
      docName = packageName.replace('expo-', '');
      console.warn(
        `Tried to guess the docs homepage for ${packageName}; add it under the "homepage" entry in package.json`
      );
    } else {
      docName = (() => {
        let parts = homepage.split('/');
        // Handle both with and without trailing slash
        let name = parts[parts.length - 1];
        if (name === '') {
          name = parts[parts.length - 2];
        }
        return name;
      })();
    }
    readme = replaceAll('docName', docName, readme);
    if (isAndroid) {
      let androidPackages = glob.sync('android/**/*Package.java');
      let androidPackage;
      let androidPackagePath = 'expo.modules.yourModule.YourPackage';
      let androidPackageName = 'YourPackage';
      if (!androidPackages) {
        console.warn(
          `No Android package classes found, using: ${androidPackageName} - be sure to update this`
        );
      } else {
        androidPackage = androidPackages[0];
        if (androidPackages.length > 1) {
          console.warn('Found multiple packages, which one should we use?');
          androidPackage = androidPackages[0];
        }

        if (androidPackage) {
          // From: android/src/main/java/expo/modules/localization/LocalizationPackage.java'
          // To:   expo.modules.localization.LocalizationPackage
          androidPackagePath = androidPackage
            .split('/java/')[1]
            .replace(/\//g, '.')
            .replace('.java', '');
          androidPackageName = (() => {
            let parts = androidPackagePath.split('.');
            return parts[parts.length - 1];
          })();

          readme = replaceAll('androidPackageName', androidPackageName, readme);
        } else {
          readme = removeUnapplicableSections('no-package', readme);
        }
      }

      readme = replaceAll('androidPackagePath', androidPackagePath, readme);
    } else {
      readme = removeUnapplicableSections('no-android', readme);
    }
  }
  return removeOptionals(readme);
}

let readme = generateREADME();
let readmePath = path.join(process.cwd(), 'README.md');
if (fs.existsSync(readmePath)) {
  console.log('expo-module-scripts: README.md exists, not updating');
} else {
  fs.writeFileSync(readmePath, readme, { encoding: 'utf8' });
}
